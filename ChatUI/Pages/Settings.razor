@page "/settings"
@using LocalChatApp.Data.Enitites
@using LocalChatApp.Models
@using LocalChatApp.Services.Abstraction

@inject IAppSettingsService AppSettingsService
@inject NavigationManager NavManager
@inject IAppUpdater AppUpdater
@*@inject ILogger<Settings> Logger*@

<h3>Settings</h3>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="appSettings" OnValidSubmit="SaveSettings">

            <div class="input-group mb-3">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">@Protocols.First(x => x.Selected).Name</button>
                <ul class="dropdown-menu">
                    @foreach (var protocol in Protocols)
                    {
                        <li><p class="dropdown-item" @onclick="(() => ProtocolChange(protocol.Name))">@protocol.Name</p></li>
                    }
                </ul>
                <InputText id="host" DisplayName="host" class="form-control" @bind-Value="appSettings.AppServerHost" />
            </div>

            <div class="mb-3">
                <label for="port">Port</label>
                <InputNumber id="port" DisplayName="port" class="form-control" @bind-Value="appSettings.AppServerPort" />
            </div>

            <div class="mb-3">
                <label for="update-url">Update Url</label>
                <InputText id="update-url" DisplayName="update-url" class="form-control" @bind-Value="appSettings.UpdateUrl" />
            </div>

            <div class="mb-3">
                <label for="">Choose avatar</label>
                <LocalChatApp.Components.Settings.DefaultAvatars @bind-UserAvatar="@appSettings.DefaultAvatar" />
            </div>


            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>

    <div class="col-md-4">
        <h1 class="display-4">Update your application</h1>
        @if (!string.IsNullOrEmpty(UpdateNotificationText))
        {
            <div class="alert alert-info" role="alert">
                @UpdateNotificationText
            </div>
            <button type="button" class="btn btn-warning" disabled>Update</button>
        }
        else
        {
            <button type="button" class="btn btn-warning" @onclick="(() => UpdateApp())">Update</button>
        }
    </div>
</div>


@code {
    private AppSettingsModel appSettings = new();
    private List<HostProtocol> Protocols = new List<HostProtocol>
    {
        new HostProtocol { Name = "HTTP" },
        new HostProtocol { Name = "HTTPS" }
    };

    private string UpdateNotificationText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var settings = await AppSettingsService.GetAllAsync();

        var hostUrl = settings.SingleOrDefault(x => x.Id == AppSettingsItemKeyEnum.AppServerHost)?.Value;

        (string Protocol, string Host) = DestructHostUrl(hostUrl);

        Protocols.First(x => string.Equals(x.Name, Protocol, StringComparison.OrdinalIgnoreCase)).Selected = true;

        appSettings.AppServerHost = Host;
        appSettings.AppServerPort = int.Parse(settings.SingleOrDefault(x => x.Id == AppSettingsItemKeyEnum.AppServerPort)?.Value ?? "0");
        appSettings.DefaultAvatar = settings.SingleOrDefault(x => x.Id == AppSettingsItemKeyEnum.DefaultAvatar)?.Value;
        appSettings.UpdateUrl = settings.SingleOrDefault(x => x.Id == AppSettingsItemKeyEnum.UpdateUrl)?.Value;
    }

    private async Task SaveSettings()
    {
        var hostUrl = string.Join("://", Protocols.First(x => x.Selected).Name.ToLower(), appSettings.AppServerHost);

        var allSettings = new List<AppSettingsItemEntity>{
            new AppSettingsItemEntity {Id = AppSettingsItemKeyEnum.AppServerHost, Value = hostUrl},
            new AppSettingsItemEntity {Id = AppSettingsItemKeyEnum.AppServerPort, Value = appSettings.AppServerPort.ToString()},
            new AppSettingsItemEntity {Id = AppSettingsItemKeyEnum.DefaultAvatar, Value = appSettings.DefaultAvatar},
            new AppSettingsItemEntity {Id = AppSettingsItemKeyEnum.UpdateUrl, Value = appSettings.UpdateUrl}
        };

        foreach (var item in allSettings)
        {
            await AppSettingsService.SaveAsync(item);
        }

        NavManager.NavigateTo("/");
    }

    private (string Protocol, string Host) DestructHostUrl(string url)
    {
        var hostParts = url.Split("://");
        var protocol = hostParts[0];
        var hostName = hostParts[1];

        return (protocol, hostName);
    }

    private void ProtocolChange(string protocol)
    {
        Protocols.ForEach(x =>
        {
            if (x.Name == protocol)
            {
                x.Selected = true;
            }
            else
            {
                x.Selected = false;
            }
        });
    }

    private async Task UpdateApp()
    {
        UpdateNotificationText = "Updating app! Please wait...";
        var filePath = await AppUpdater.DownloadUpdate();
        UpdateNotificationText = "Update packages downloaded. Wait for update....";

        StateHasChanged();

        if (filePath is not null)
        {
            try
            {
                var updated = await AppUpdater.Update(filePath);
                UpdateNotificationText = "App has been updated!";
            }
            catch (Exception ex)
            {
                UpdateNotificationText = ex.Message;
            }

            
            StateHasChanged();
        }

        await Task.Delay(5000);
        UpdateNotificationText = string.Empty;
    }

    private class HostProtocol
    {
        public string Name { get; set; }

        public bool Selected { get; set; }
    }
}