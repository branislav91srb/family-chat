@using Contracts
@using Contracts.Models
@using LocalChatApp.Data.Enitites
@using LocalChatApp.Models
@using LocalChatApp.Services.Abstraction
@using Microsoft.AspNetCore.SignalR.Client

@inject IServerUriService ServerUriService
@inject IJSRuntime _jsRuntime;
@inject IAppSettingsService _appSettingsService
@inject IChatHubConnectionFactory _chatHubConnectionFactory

@*https://codepen.io/anwar0x09/pen/zMRyBx*@
<div class="col-lg-6 col-md-12 col-sm-12">
    <!-- DIRECT CHAT PRIMARY -->
    <div class="box box-primary direct-chat direct-chat-primary">
        <div class="box-header with-border">
            <h3 class="box-title">Direct Chat</h3>

            <div class="box-tools pull-right">
                <span data-toggle="tooltip" title="" class="badge bg-light-blue" data-original-title="3 New Messages">3</span>
                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
                <button type="button" class="btn btn-box-tool" data-toggle="tooltip" title="Contacts" data-widget="chat-pane-toggle">
                    <i class="fa fa-comments"></i>
                </button>
                <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
            </div>
        </div>
        <!-- /.box-header -->
        <div class="box-body">
            <!-- Conversations are loaded here -->


            <div class="direct-chat-messages">
                @foreach (var message in Model.Messages)
                {
                    <LocalChatApp.Components.Chat.MessageParts.Message Model="message" />
                }
            </div>

            <!--/.direct-chat-messages-->
            <!-- Contacts are loaded here -->
            <LocalChatApp.Components.Chat.MessageParts.OnlineUsers Model="OnlineUsers" />
            <!-- /.direct-chat-pane -->
        </div>
        <!-- /.box-body -->
        <div class="box-footer">
            <EditForm Model="Model" OnValidSubmit="SendMessage" autocomplete="off">
                <div class="input-group">

                    <InputText name="message" class="form-control"
                               @bind-Value="Model.Message"
                               @oninput="((e) => MessageChanged(e))"
                               @onkeyup="((e) => SendIfEnter(e))"
                               autocomplete="off" placeholder="Type Message ..." />

                    <span class="input-group-btn">
                        <button type="submit" class="btn btn-primary btn-flat" disabled=@(!currentMessageText.Trim().Any())>Send</button>
                    </span>
                </div>
            </EditForm>
        </div>
        <!-- /.box-footer-->
    </div>
    <!--/.direct-chat -->
</div>


@code {
    [Parameter]
    public ChatModel Model { get; set; }

    private IEnumerable<ChatUserModel> OnlineUsers = Enumerable.Empty<ChatUserModel>();

    private HubConnection Connection;

    private string MyAvatar = string.Empty;

    private string currentMessageText = "";

    protected override async Task OnInitializedAsync()
    {
        var settings = await _appSettingsService.GetAllAsync();
        var avatar = settings.First(x => x.Id == AppSettingsItemKeyEnum.DefaultAvatar);
        MyAvatar = avatar.Value;


        Connection = await _chatHubConnectionFactory.CreateConnectionAsync(new Dictionary<string, string>
        {
            {"X-USER-NAME", DeviceInfo.Name},
            {"X-AVATAR", MyAvatar}
        });

        Connection.On<Message>("ReceiveMessage", ReceiveMessage);
        Connection.On<List<ChatUserModel>>("UpdateOnlineUsers", UpdateOnlineUsers);

        await Connection.StartAsync();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Model.Message))
        {
            return;
        }

        await Connection.SendAsync("SendMessage", new MessageSender
            {
                UserName = DeviceInfo.Name,
                Avatar = MyAvatar
            }, Model.Message);

        Model.Message = string.Empty;

    }

    public async Task ReceiveMessage(Message message)
    {
        if (string.IsNullOrWhiteSpace(message.Text))
        {
            return;
        }

        Model.Messages.Add(message);
        StateHasChanged();

        if (message.Sender.UserName != DeviceInfo.Name)
        {
            await _jsRuntime.InvokeAsync<string>("PlayNotificationSound", "message-notification-sound");
        }
    }

    public Task UpdateOnlineUsers(List<ChatUserModel> onlineUsers)
    {
        OnlineUsers = onlineUsers ?? Enumerable.Empty<ChatUserModel>();

        return Task.CompletedTask;
    }

    private async Task SendIfEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    private void MessageChanged(ChangeEventArgs e)
    {
        currentMessageText = e.Value.ToString();
    }
}